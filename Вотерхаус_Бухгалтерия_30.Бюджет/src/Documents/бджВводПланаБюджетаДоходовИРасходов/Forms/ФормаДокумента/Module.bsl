#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ = Документы.бджВводПланаБюджетаДоходовИРасходов.ПустаяСсылка() Тогда
		
		ЗначенияДляЗаполнения = Новый Структура("Месяц, Организация, Ответственный", 
			"Объект.Месяц",
			"Объект.Организация",
			"Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		ПриПолученииДанныхНаСервере();		
			
	КонецЕсли;	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	//ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриПолученииДанныхНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	//УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриПолученииДанныхНаСервере();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВводПланаБюджетаДоходовИРасходов", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизацииНаСервере();
	
КонецПроцедуры

//////////////////////////////////////
// Редактирование месяца строкой.

&НаКлиенте
Процедура МесяцСтрокойПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтотОбъект, "Объект.Месяц", "МесяцСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтотОбъект, ЭтотОбъект, "Объект.Месяц", "МесяцСтрокой");
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтотОбъект, "Объект.Месяц", "МесяцСтрокой", Направление, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПлан

&НаКлиенте
Процедура ПланПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущийЭлемент.Имя = "ПланАналитика" Тогда
		ТекущиеДанные = Элементы.План.ТекущиеДанные;
		ТипАналитики = ТипАналитики(ТекущиеДанные.СтатьяБюджетаДоходовИРасходов);
        Если ТипАналитики = ПредопределенноеЗначение("Перечисление.бджТипыАналитикиСтатейБюджетаДоходовИРасходов.НоменклатурнаяГруппа") Тогда
        	Элемент.ТекущийЭлемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы");
        ИначеЕсли ТипАналитики = ПредопределенноеЗначение("Перечисление.бджТипыАналитикиСтатейБюджетаДоходовИРасходов.СтатьяЗатрат") Тогда
        	Элемент.ТекущийЭлемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат");
        ИначеЕсли ТипАналитики = ПредопределенноеЗначение("Перечисление.бджТипыАналитикиСтатейБюджетаДоходовИРасходов.ПрочиеДоходыИРасходы") Тогда
        	Элемент.ТекущийЭлемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПрочиеДоходыИРасходы");
        Иначе
        	Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланСтатьяБюджетаДоходовИРасходовПриИзменении(Элемент)
	ТекущиеДанные = Элементы.План.ТекущиеДанные;
	ТекущиеДанные.Аналитика = Неопределено;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РассчитатьЗависимыеСтатьиБюджета(Команда)
	РассчитатьЗависимыеСтатьиБюджетаНаСервере();
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ТипАналитики(СтатьяБюджетаДоходовИРасходов)
	//@skip-check wrong-string-literal-content
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяБюджетаДоходовИРасходов, "ТипАналитики");
КонецФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.Месяц", "МесяцСтрокой");
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ПараметрыФО = Новый Структура;
	ПараметрыФО.Вставить("Организация", Объект.Организация);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОрганизацииНаСервере()
	
	ОчиститьТаблицыДокумента();
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицыДокумента()	
	
	Объект.План.Очистить();	
		
КонецПроцедуры

&НаСервере
Процедура РассчитатьЗависимыеСтатьиБюджетаНаСервере()
	Отказ = Ложь;
	ВыполнитьПроверкиПередРасчетомЗависимыхСтатейБюджета(Отказ);	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;		
	
	// Выручка = Количество * Средняя цена
	РассчитатьЗначениеПоСтатьеБДДР("Выручка", "ЗначениеПоСтатьеБДДР(""ПродажиКоличество"", Аналитика) * ЗначениеПоСтатьеБДДР(""СредняяЦенаПродаж"", Аналитика)");
	
	// НДС = Выручка / 6;
	РассчитатьЗначениеПоСтатьеБДДР("НДС", "ЗначениеПоСтатьеБДДР(""Выручка"", Аналитика) / 6");
	
	// Чистая выручка = Выручка - НДС
	РассчитатьЗначениеПоСтатьеБДДР("ЧистаяВыручка", "ЗначениеПоСтатьеБДДР(""Выручка"", Аналитика)  - ЗначениеПоСтатьеБДДР(""НДС"", Аналитика)");
	
	// Валовая прибыль = Чистая выручка - Себестоимость
	РассчитатьЗначениеПоСтатьеБДДР("ВаловаяПрибыль", "ЗначениеПоСтатьеБДДР(""ЧистаяВыручка"", Аналитика)  - ЗначениеПоСтатьеБДДР(""Себестоимость"", Аналитика)");
	
	// Процент валовой прибыли = Валовая прибыль / Чистая выручка 
	РассчитатьЗначениеПоСтатьеБДДР("ВаловаяПрибыльПроцент", "?(Не ЗначениеЗаполнено(ЗначениеПоСтатьеБДДР(""ЧистаяВыручка"", Аналитика)), 0, ЗначениеПоСтатьеБДДР(""ВаловаяПрибыль"", Аналитика) / ЗначениеПоСтатьеБДДР(""ЧистаяВыручка"", Аналитика))");
	
	// Ebitda = Валовая прибыль - Коммерческие - Управленческие
	РассчитатьЗначениеПоСтатьеБДДР("Ebitda", "ЗначениеПоСтатьеБДДР(""ВаловаяПрибыль"", Аналитика, Истина) - ЗначениеПоСтатьеБДДР(""КоммерческиеРасходы"", Аналитика, Истина) - ЗначениеПоСтатьеБДДР(""УправленческиеРасходы"", Аналитика, Истина)");
	
	// Прибыль до налогообложения = Ebitda + Прочие доходы - Прочие расходы - Амортизация
	РассчитатьЗначениеПоСтатьеБДДР("ПрибыльДоНалогооблажения", "ЗначениеПоСтатьеБДДР(""Ebitda"", Аналитика, Истина) + ЗначениеПоСтатьеБДДР(""ПрочиеДоходы"", Аналитика, Истина) - ЗначениеПоСтатьеБДДР(""ПрочиеРасходы"", Аналитика, Истина) - ЗначениеПоСтатьеБДДР(""Амортизация"", Аналитика, Истина)");
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкиПередРасчетомЗависимыхСтатейБюджета(Отказ)
	Если Не ЕстьСтатьяБДДРСИменем("ПродажиКоличество") Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В информационной базе отсутствуют статьи БДДР ""Количество продаж"".';"),,,, Отказ);		
	КонецЕсли;
	
	Если Не ЕстьСтатьяБДДРСИменем("СредняяЦенаПродаж") Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В информационной базе отсутствуют статьи БДДР ""Средняя цена продаж"".';"),,,, Отказ);		
	КонецЕсли;
	
	Если БезопасныйРежим() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Для выполнения расчета в расширении необходимо отключить безопасный режим.';"),,,, Отказ);		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура РассчитатьЗначениеПоСтатьеБДДР(ИдентификаторСтатьи, Формула)
	
	СтатьяБДДР = Справочники.бджСтатьиБюджетаДоходовИРасходов.НайтиПоРеквизиту("Идентификатор", ИдентификаторСтатьи);
	Если Не ЕстьСтатьяБДДР(СтатьяБДДР) Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'В информационной базе отсутствует статья БДДР ""%1"".';"), ИдентификаторСтатьи));
		Возврат;
	КонецЕсли;	
	
	УдалитьСтрокиПоСтатьеБДДР(СтатьяБДДР);

	АналитикаМассив = АналитикаДляРасчета(СоответствиеТиповАналитикиСтатейБДДРИТипаМетаданных()[ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяБДДР, "ТипАналитики")]);
	Для Каждого Аналитика Из АналитикаМассив Цикл
		ПланСтрока = Объект.План.Добавить();
		ПланСтрока.СтатьяБюджетаДоходовИРасходов = СтатьяБДДР;
		ПланСтрока.Аналитика = Аналитика;
		
		//@skip-check server-execution-safe-mode
		Выполнить("ПланСтрока.Значение = " + Формула);	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоответствиеТиповАналитикиСтатейБДДРИТипаМетаданных()
	СоответствиеТипов = Новый Соответствие();
	СоответствиеТипов.Вставить(Перечисления.бджТипыАналитикиСтатейБюджетаДоходовИРасходов.БезАналитики, 		Неопределено);
	СоответствиеТипов.Вставить(Перечисления.бджТипыАналитикиСтатейБюджетаДоходовИРасходов.НоменклатурнаяГруппа, Тип("СправочникСсылка.НоменклатурныеГруппы"));
	СоответствиеТипов.Вставить(Перечисления.бджТипыАналитикиСтатейБюджетаДоходовИРасходов.СтатьяЗатрат, 		Тип("СправочникСсылка.СтатьиЗатрат"));
	СоответствиеТипов.Вставить(Перечисления.бджТипыАналитикиСтатейБюджетаДоходовИРасходов.ПрочиеДоходыИРасходы, Тип("СправочникСсылка.ПрочиеДоходыИРасходы"));
	Возврат СоответствиеТипов;
КонецФункции

//@skip-check module-unused-method
&НаСервере
Функция ЗначениеПоСтатьеБДДР(ИдентификаторСтатьиБДДР, Аналитика, РассчитыватьБезУчетаАналитики = Ложь)
	
	Значение = 0;	
	
	Статья = Справочники.бджСтатьиБюджетаДоходовИРасходов.НайтиПоРеквизиту("Идентификатор", ИдентификаторСтатьиБДДР);
	Для Каждого ПланСтрока Из Объект.План Цикл
		Если ПланСтрока.СтатьяБюджетаДоходовИРасходов <> Статья Тогда
			Продолжить;
		КонецЕсли;
		
		Если РассчитыватьБезУчетаАналитики 
			Или (Не ЗначениеЗаполнено(Аналитика) И Не ЗначениеЗаполнено(ПланСтрока.Аналитика))
			Или (ЗначениеЗаполнено(Аналитика) И ПланСтрока.Аналитика = Аналитика) Тогда
			Значение = Значение + ПланСтрока.Значение;
		КонецЕсли;		
	КонецЦикла;
		
	Возврат Значение;
	
КонецФункции

&НаСервере
Процедура УдалитьСтрокиПоСтатьеБДДР(СтатьяБДДР)
	Индекс = Объект.План.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Если Объект.План[Индекс].СтатьяБюджетаДоходовИРасходов = СтатьяБДДР Тогда
			Объект.План.Удалить(Индекс);	
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЕстьСтатьяБДДРСИменем(Имя)
	Возврат Справочники.бджСтатьиБюджетаДоходовИРасходов.НайтиПоРеквизиту("Идентификатор", Имя) <> Справочники.бджСтатьиБюджетаДоходовИРасходов.ПустаяСсылка();
КонецФункции

&НаСервере
Функция ЕстьСтатьяБДДР(СтатьяБДДР)
	Возврат СтатьяБДДР <> Справочники.бджСтатьиБюджетаДоходовИРасходов.ПустаяСсылка();
КонецФункции

&НаСервере
Функция АналитикаДляРасчета(ТипАналитики)
	Если ТипАналитики = Неопределено Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Неопределено);	
	КонецЕсли;
	
	ПланТЗ = Объект.План.Выгрузить();
	Для Каждого ПланСтрока Из ПланТЗ Цикл
		Если Не ЗначениеЗаполнено(ПланСтрока.Аналитика) И ПланСтрока.Аналитика <> Неопределено Тогда
			ПланСтрока.Аналитика = Неопределено;	
		КонецЕсли;	
	КонецЦикла;
	ПланТЗ.Свернуть("Аналитика");
	АналитикаМассив = ПланТЗ.ВыгрузитьКолонку("Аналитика");
	
	Индекс = АналитикаМассив.Количество() - 1;
	Пока Индекс >= 0 Цикл
		Если Не (ТипЗнч(АналитикаМассив[Индекс]) = ТипАналитики Или АналитикаМассив[Индекс] = Неопределено) Тогда
			АналитикаМассив.Удалить(Индекс);	
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат АналитикаМассив;
КонецФункции

#КонецОбласти