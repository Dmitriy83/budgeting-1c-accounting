#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументРезультат.Очистить();
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
	Период = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ПериодФормирования").Значение;
		
	МакетКомпоновки = ЗарплатаКадрыОтчеты.МакетКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	// Создадим и инициализируем процессор компоновки.
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;    
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, Новый Структура("Факт", ПолучитьФактБюджетаДоходовИРасходов(Период)), ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	// Обозначим начало вывода
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДопСвойства.Вставить("ОтчетПустой", ОтчетыСервер.ОтчетПустой(ЭтотОбъект, ПроцессорКомпоновки));                         
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

// Для общей формы "Форма отчета" подсистемы "Варианты отчетов".
// 
// Параметры:
//  Форма 			- ФормаКлиентскогоПриложения
//  КлючВарианта 	- Строка
//  Настройки 		- Произвольный
//  
//@skip-check module-empty-method
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт		
КонецПроцедуры

// Получить бюджет доходов и расходов.
// 
// Параметры:
//  Период - СтандартныйПериод - Период
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица бюджета доходов и расходов
//
Функция ПолучитьФактБюджетаДоходовИРасходов(Период)

	Факт = Новый ТаблицаЗначений;
	Факт.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Факт.Колонки.Добавить("СтатьяБюджетаДоходовИРасходов", Новый ОписаниеТипов("СправочникСсылка.бджСтатьиБюджетаДоходовИРасходов"));
	
	МассивТиповАналитики = Новый Массив();
	МассивТиповАналитики.Добавить(Тип("СправочникСсылка.НоменклатурныеГруппы"));
	МассивТиповАналитики.Добавить(Тип("СправочникСсылка.СтатьиЗатрат"));
	МассивТиповАналитики.Добавить(Тип("СправочникСсылка.ПрочиеДоходыИРасходы"));
	Факт.Колонки.Добавить("Аналитика", Новый ОписаниеТипов(МассивТиповАналитики));
	
	Факт.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	Факт.Колонки.Добавить("ЗначениеФакт", Новый ОписаниеТипов("Число"));
		
	// Сначала выбираем все статьт доходов и расходов
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиБюджетаДоходовИРасходов.Ссылка КАК СтатьяБюджетаДоходовИРасходов,
	|	СтатьиБюджетаДоходовИРасходов.ТекстЗапросаПолученияФакта,
	|	СтатьиБюджетаДоходовИРасходов.ТипАналитики
	|ИЗ
	|	Справочник.бджСтатьиБюджетаДоходовИРасходов КАК СтатьиБюджетаДоходовИРасходов
	|ГДЕ
	|	НЕ СтатьиБюджетаДоходовИРасходов.ПометкаУдаления
	|	И НЕ СтатьиБюджетаДоходовИРасходов.ЭтоГруппа
	|	И СтатьиБюджетаДоходовИРасходов.Использовать
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьиБюджетаДоходовИРасходов.Порядок";	
	Выборка = Запрос.Выполнить().Выбрать();	
	//@skip-check query-in-loop
	Пока Выборка.Следующий() Цикл
		// Испоняем запросы (да в цикле, в этом отчете принимаем, что это допустимо)
		Попытка	
			Запрос = Новый Запрос; 
			Запрос.УстановитьПараметр("НачалоПериода", 	НачалоМесяца(Период.ДатаНачала));
			Запрос.УстановитьПараметр("КонецПериода", 	КонецМесяца(Период.ДатаОкончания));			
			Запрос.Текст = Выборка.ТекстЗапросаПолученияФакта;		
			РезультатПоСтатье = Запрос.Выполнить().Выгрузить();
			
			Если Не ЕстьОбязательныеКолонки(РезультатПоСтатье, Выборка.ТипАналитики) Тогда
				Продолжить;	
			КонецЕсли;
			
			Если РезультатПоСтатье.Колонки.Найти("СтатьяБюджетаДоходовИРасходов") = Неопределено Тогда
				РезультатПоСтатье.Колонки.Добавить("СтатьяБюджетаДоходовИРасходов", Новый ОписаниеТипов("СправочникСсылка.бджСтатьиБюджетаДоходовИРасходов"));	
				Для Каждого РезультатПоСтатьеСтрока Из РезультатПоСтатье Цикл
					РезультатПоСтатьеСтрока.СтатьяБюджетаДоходовИРасходов = Выборка.СтатьяБюджетаДоходовИРасходов;
				КонецЦикла;
			КонецЕсли;
					
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатПоСтатье, Факт);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Некорректный запрос в статье бюджета %1. Плановые данные не получены.';"), Выборка.СтатьяБюджетаДоходовИРасходов));
		КонецПопытки;
	КонецЦикла;	
	
	Возврат Факт;
	
КонецФункции

// Есть обязательные колонки.
// 
// Параметры:
//  РезультатПоСтатье - ТаблицаЗначений - Результат по статье
//  ТипАналитики 	  - ПеречислениеСсылка.бджТипыАналитикиСтатейБюджетаДоходовИРасходов
// 
// Возвращаемое значение:
// 	Булево
//  
Функция ЕстьОбязательныеКолонки(РезультатПоСтатье, ТипАналитики)
	ОбязательныеКолонки = Новый Массив;
	ОбязательныеКолонки.Добавить("Организация");
	ОбязательныеКолонки.Добавить("Месяц");
	ОбязательныеКолонки.Добавить("ЗначениеФакт");
	Если Не (ТипАналитики = Перечисления.бджТипыАналитикиСтатейБюджетаДоходовИРасходов.БезАналитики 
		Или ТипАналитики = Перечисления.бджТипыАналитикиСтатейБюджетаДоходовИРасходов.ПустаяСсылка()) Тогда
		ОбязательныеКолонки.Добавить("Аналитика");
	КонецЕсли;
		
	Для Каждого ИмяОбязательнойКолонки Из ОбязательныеКолонки Цикл
		Если РезультатПоСтатье.Колонки.Найти(ИмяОбязательнойКолонки) = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Не хватает обязательных колонок.'");	
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли